[gd_scene load_steps=5 format=3 uid="uid://cpcktvxjqbxag"]

[ext_resource type="PackedScene" uid="uid://bpkdoaq7tk0b8" path="res://scenes/world/character.tscn" id="1_7v8xb"]
[ext_resource type="Script" path="res://scenes/world/world_screen.gd" id="1_ljijd"]
[ext_resource type="Script" path="res://scenes/world/chunk_container.gd" id="2_lswou"]

[sub_resource type="GDScript" id="GDScript_iq6x5"]
script/source = "@tool
extends Node2D

@export var _draw_chunks := false

#count chanks in world
var world_size: Vector2i = ProjectSettings.get_setting(\"application/game/size/world\", Vector2i.ONE * 16)

#count tiles in chunk 
var chunk_size: int = ProjectSettings.get_setting(\"application/game/size/chunk\", 16) 

#count pixels in tile
var tile_size: int = ProjectSettings.get_setting(\"application/game/size/tile\", 16)  


@onready var _pixel_chunk_size: int = tile_size * chunk_size 
@onready var _pixel_world_size: Vector2i = _pixel_chunk_size * world_size


func _draw() -> void:
	if not _draw_chunks: return
	
	for x in world_size.x:
		draw_line(
			Vector2(x * _pixel_chunk_size, 0), 
			Vector2(x * _pixel_chunk_size, _pixel_world_size.y), 
			Color.GREEN, 2
		)
	
	for y in world_size.y:
		draw_line(
			Vector2(0, y * _pixel_chunk_size), 
			Vector2(_pixel_world_size.x, y * _pixel_chunk_size), 
			Color.GREEN, 2
		)
	
	for x in world_size.x:
		for y in world_size.y:
			draw_string(
				ThemeDB.fallback_font, 
				Vector2(x, y) * _pixel_chunk_size - Vector2(-16, -32),
				\"X:%s  Y:%s\" % [x, y]
			)
"

[node name="WorldScreen" type="Node2D"]
script = ExtResource("1_ljijd")

[node name="TileMapLayer" type="TileMapLayer" parent="."]

[node name="ChunkContainer" type="Node2D" parent="."]
script = ExtResource("2_lswou")

[node name="ChunkGridDrawer" type="Node2D" parent="."]
script = SubResource("GDScript_iq6x5")
_draw_chunks = true

[node name="Character" parent="." instance=ExtResource("1_7v8xb")]
